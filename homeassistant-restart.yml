- name: Check URL for 200 status and take action if not 200
  hosts: all
  gather_facts: false
  tasks:
    - name: Send HTTP GET request
      uri:
        url: "https://homeassistant.willkennedy.info/lovelace/0"  # Replace with your desired URL
        method: GET
      register: response
      ignore_errors: yes

    - name: Check HTTP status code
      assert:
        that:
          - response.status != 200
        fail_msg: "URL returned status code {{ response.status }}"
        success_msg: "URL returned status code 200"
      when: response.status != 200  # Run the following tasks only if status is not 200

    - name: Run tasks when status is not 200
      debug:
        msg: "Take action here because status is not 200"
      when: response.status != 200

    - name: vm state running check
      community.general.proxmox_kvm:
        api_user: "{{ api_user}}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        vmid: 100
        node: "{{ node }}"
        state: current
      register: vmstatus
      # when: vmstatus.status == "running"
      # when: response.status != 200

    - name: stop if started
      community.general.proxmox_kvm:
        api_user: "{{ api_user}}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        vmid: 100
        node: "{{ node }}"
        state: stopped
      # when: vmstatus.status == "started"
      register: vmstatus

    - name: Sleep for 10 seconds for vm to start
      ansible.builtin.wait_for:
        timeout: 30
      delegate_to: localhost

    - name: vm state running check
      wait_for:
        community.general.proxmox_kvm:
          api_user: "{{ api_user}}"
          api_token_id: "{{ api_token_id }}"
          api_token_secret: "{{ api_token_secret }}"
          api_host: "{{ api_host }}"
          vmid: 100
          node: "{{ node }}"
          state: current
        register: vmstatus


    - name: start if stopped
      wait_for:
        community.general.proxmox_kvm:
          api_user: "{{ api_user}}"
          api_token_id: "{{ api_token_id }}"
          api_token_secret: "{{ api_token_secret }}"
          api_host: "{{ api_host }}"
          vmid: 100
          node: "{{ node }}"
          state: started
        register: vmstatus
      # when: vmstatus.status == "stopped"




    # - name: Sleep for 10 seconds and continue with play
    #   ansible.builtin.wait_for:
    #     timeout: 10
    #   delegate_to: localhost
    #   when: response.status != 200

    # - name: Stop the Proxmox VM
    #   proxmox_kvm:
    #     node: pve  # Replace with the name of your Proxmox node
    #     vmid: 100  # Replace with the VM ID of your VM
    #     state: stopped
    #   when: response.status != 200

    # - name: Sleep for 10 seconds and continue with play
    #   ansible.builtin.wait_for:
    #     timeout: 30
    #   delegate_to: localhost
    #   when: response.status != 200

    # - name: Start the Proxmox VM
    #   proxmox_kvm:
    #     node: pve
    #     vmid: 100
    #     state: started
    #   when: response.status != 200